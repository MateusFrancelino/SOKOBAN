/**
	Estrutura inicial para o jogo SOKOBAN feito por Thiago Felski Pereira
	Jogo feito pelos acadêmicos Matheus Evandro Rech, Mateus da Silva Francelino e Henrique Leonardo Beerends Junior.
	Data inicial: 03/05/2019
	Última atualização: 15/05/2019 05:34:45 AM
**/
#include <iostream>
#include <windows.h>
#include <conio.h>
#include <random>
#include <ctime>
#include <mmsystem.h>
#include <time.h>
#include <locale>

#define L 10
#define C 36
#define L1 9
#define C1 29
using namespace std;


int main()
{
	///ALERTA: NÃO MODIFICAR O TRECHO DE CÓDIGO, A SEGUIR.
    //INICIO: COMANDOS PARA QUE O CURSOR NÃO FIQUE PISCANDO NA TELA
	HANDLE out = GetStdHandle(STD_OUTPUT_HANDLE);
	CONSOLE_CURSOR_INFO     cursorInfo;
	GetConsoleCursorInfo(out, &cursorInfo);
	cursorInfo.bVisible = false; // set the cursor visibility
	SetConsoleCursorInfo(out, &cursorInfo);
	//FIM: COMANDOS PARA QUE O CURSOR NÃO FIQUE PISCANDO NA TELA
	//INÍCIO: COMANDOS PARA REPOSICIONAR O CURSOR NO INÍCIO DA TELA
	COORD coord, boneco, caixa1, caixa2, caixa3, caixa4, iniciar, texttuto, restart;
	coord.X = 3;
	coord.Y = 7;
	iniciar.X = 0;
	iniciar.Y = 0;
	//FIM: COMANDOS PARA REPOSICIONAR O CURSOR NO INÍCIO DA TELA
///ALERTA: NÃO MODIFICAR O TRECHO DE CÓDIGO, ACIMA.

//Posição inicial do personagem no console
	int posicao = 0, ntext = 0,menuoption = 0, tecla, textotuto=0, ponto = 0;
	string text;
	//Coordenadas para impressão na tela
	int menu[392] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                     0,0,0,0,0,0,0,0,0,0,0,0,0,201,205,205,205,205,205,205,205,187,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                     0,0,0,0,0,0,0,0,0,0,0,0,0,186,1,186,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,187,0,0,0,0,0,201,188,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                     0,0,0,0,0,0,0,0,0,0,0,0,0,16,186,1,186,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,201,205,188,0,0,0,0,0,200,205,187,0,0,0,0,0,0,0,0,0,0,0,0,0,
                     0,0,0,0,0,0,0,0,0,0,0,16,186,0,0,1,0,0,186,17,0,0,0,0,0,0,0,0,0,0,0,0,
                     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,205,205,205,205,205,205,205,205,205,188,0,0,0,0,0,0,0,0,0,0,0,0,0,
                     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

    int mptutorial[20][36] = {176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,
176,176,176,176,176,176,176,176,176,176,201,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,187,176,176,176,176,176,
176,176,176,176,176,176,176,176,176,176,186,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,186,176,176,176,176,176,
176,176,176,176,176,176,176,176,201,205,188,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,186,176,176,176,176,176,
176,176,176,176,176,176,201,205,188,0,0,0,0,0,186,0,0,0,0,0,0,0,186,0,0,0,0,0,0,0,186,176,176,176,176,176,
176,176,176,176,176,176,186,0,0,0,0,0,0,0,186,207,0,0,0,0,0,207,186,207,0,0,0,0,0,207,186,176,176,176,176,176,
176,201,205,205,205,205,188,0,0,0,0,0,0,0,200,205,205,205,205,205,205,203,202,205,205,205,205,205,205,205,188,176,176,176,176,176,
176,186,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,186,176,176,176,176,176,176,176,176,176,176,176,176,176,176,
176,186,0,0,0,0,186,0,0,0,0,0,0,0,186,0,0,0,0,0,0,186,176,176,176,176,176,176,176,176,176,176,176,176,176,176,
176,186,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,186,176,176,176,176,176,176,176,176,176,176,176,176,176,176,
176,200,205,205,205,205,187,0,0,0,0,0,0,0,205,205,205,205,205,205,205,202,205,187,176,176,176,176,176,176,176,176,176,176,176,176,
176,176,176,176,176,176,186,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,186,176,176,176,176,176,176,176,176,176,176,176,176,
176,176,176,176,176,176,200,205,187,0,0,0,0,0,0,0,0,0,0,0,0,0,0,186,176,176,176,176,176,176,176,176,176,176,176,176,
176,176,176,176,176,176,176,176,200,205,187,0,0,0,201,205,205,205,205,205,205,205,205,188,176,176,176,176,176,176,176,176,176,176,176,176,
176,176,176,176,176,176,176,176,176,176,186,0,0,0,186,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,
176,176,176,176,176,176,176,176,176,176,200,187,0,201,188,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,
176,176,176,176,176,176,176,201,205,205,205,188,0,186,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,
176,176,176,176,176,176,176,186,0,0,0,0,0,186,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,
176,176,176,176,176,176,176,200,205,205,205,205,205,188,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,
176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176};
    int block[20][36] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,
0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,
0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,
0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,
0,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};


int blockcx[20][36] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
  233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340,
   341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
    449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556,
     557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664,
      665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720};



int menum[261] = {
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,201,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,187,0,0,0,0,
0,0,0,0,0,16,186,0,0,1,0,0,186,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,16,186,0,0,0,1,0,0,0,186,17,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,16,186,0,0,1,0,186,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,16,186,1,186,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,16,186,0,0,0,0,0,0,1,0,0,0,0,0,0,186,17,0,0,0,0,0,0,0,
0,0,0,0,0,0,200,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,188,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

int mapa1 [17][29]{176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
176, 176, 176, 176, 176, 176, 201, 205, 205, 187, 176, 176, 176, 176, 176, 176, 176, 176, 176, 201, 205, 205, 187, 176, 176, 176, 176, 176, 176,
176, 176, 176, 176, 176, 201, 188, 0, 0, 186, 176, 176, 176, 176, 176, 176, 176, 176, 176, 186, 0, 0, 186, 176, 176, 176, 176, 176, 176,
176, 176, 176, 176, 176, 186, 0, 0, 0, 204, 205, 205, 205, 205, 205, 205, 205, 205, 205, 188, 0, 0, 186, 176, 176, 176, 176, 176, 176,
176, 176, 176, 176, 176, 186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 186, 176, 176, 176, 176, 176, 176,
176, 176, 176, 176, 201, 202, 205, 205, 0, 200, 205, 205, 205, 205, 205, 203, 205, 205, 205, 205, 205, 0, 202, 205, 205, 205, 187, 176, 176,
176, 176, 176, 176, 186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 186, 176, 176,
176, 176, 176, 176, 186, 0, 0, 0, 0, 205, 205, 187, 0, 0, 0, 186, 0, 0, 186, 0, 0, 0, 0, 0, 0, 0, 186, 176, 176,
176, 176, 176, 176, 186, 0, 0, 0, 0, 0, 0, 204, 205, 205, 203, 188, 0, 0, 186, 0, 0, 0, 0, 0, 0, 0, 186, 176, 176,
176, 176, 176, 176, 186, 0, 205, 203, 205, 205, 205, 188, 0, 0, 200, 205, 205, 205, 188, 0, 0, 0, 0, 0, 0, 0, 186, 176, 176,
176, 176, 176, 176, 200, 205, 205, 185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 186, 176, 176,
176, 176, 176, 176, 176, 201, 205, 202, 205, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 186, 176, 176,
176, 176, 176, 176, 176, 186, 0, 0, 0, 3, 201, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 188, 176, 176,
176, 176, 176, 176, 176, 200, 205, 187, 0, 3, 186, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
176, 176, 176, 176, 176, 176, 176, 186, 0, 3, 186, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
176, 176, 176, 176, 176, 176, 176, 200, 205, 205, 188, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176};
int mapa1b[17][29]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 1, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2, 1, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0,
0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

int mapa2 [16][34]{176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
176, 176, 176, 176, 201, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 203, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 187, 176, 176, 176, 176,
176, 176, 176, 176, 186, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 186, 176, 176, 176, 176,
176, 176, 176, 176, 204, 205, 205, 205, 205, 205, 205, 205, 205, 205, 187, 0, 0, 201, 185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 186, 176, 176, 176, 176,
176, 176, 176, 176, 186, 0, 0, 201, 205, 205, 205, 205, 205, 205, 188, 0, 0, 186, 204, 205, 0, 0, 205, 205, 205, 205, 205, 205, 205, 185, 176, 176, 176, 176,
176, 176, 176, 176, 186, 0, 0, 186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 186, 186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 186, 176, 176, 176, 176,
176, 176, 176, 176, 186, 0, 0, 186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 186, 186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 186, 176, 176, 176, 176,
176, 176, 176, 176, 186, 0, 0, 186, 0, 0, 201, 205, 205, 205, 205, 205, 205, 188, 204, 205, 205, 205, 205, 205, 205, 205, 0, 0, 205, 185, 176, 176, 176, 176,
176, 176, 176, 176, 204, 205, 205, 188, 0, 0, 202, 205, 205, 205, 205, 205, 205, 205, 188, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 186, 176, 176, 176, 176,
176, 176, 176, 176, 186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 186, 176, 176, 176, 176,
176, 176, 176, 176, 186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 186, 176, 176, 176, 176,
176, 176, 176, 176, 204, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 187, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 186, 176, 176, 176, 176,
176, 176, 176, 176, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 188, 176, 176, 176, 176,
176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176};
int mapa2b[16][34]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0,
0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

int mapa3 [21][31]{176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
176, 176, 176, 176, 201, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 187, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
176, 176, 176, 176, 186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 186, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
176, 176, 176, 176, 186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 186, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
176, 176, 176, 176, 186, 0, 0, 0, 0, 0, 0, 0, 186, 0, 0, 0, 0, 0, 0, 0, 186, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
176, 176, 176, 176, 204, 205, 205, 205, 205, 205, 205, 205, 206, 205, 205, 205, 0, 0, 0, 0, 186, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
176, 176, 176, 176, 186, 0, 0, 0, 0, 0, 0, 0, 186, 0, 0, 0, 0, 0, 0, 0, 186, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
176, 176, 176, 176, 186, 0, 0, 0, 0, 0, 0, 0, 186, 0, 0, 0, 0, 0, 0, 0, 186, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
176, 176, 176, 176, 186, 0, 0, 0, 0, 0, 0, 0, 186, 0, 0, 0, 0, 0, 0, 0, 186, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
176, 176, 176, 176, 186, 0, 0, 0, 0, 0, 0, 0, 186, 0, 0, 0, 0, 0, 0, 0, 204, 205, 205, 205, 205, 205, 187, 176, 176, 176, 176,
176, 176, 176, 176, 186, 0, 0, 0, 0, 0, 205, 205, 206, 205, 205, 205, 0, 0, 0, 0, 186, 0, 0, 0, 0, 0, 186, 176, 176, 176, 176,
176, 176, 176, 176, 186, 0, 0, 0, 0, 0, 0, 0, 186, 0, 0, 0, 0, 0, 0, 0, 186, 3, 3, 3, 3, 3, 186, 176, 176, 176, 176,
176, 176, 176, 176, 186, 0, 0, 0, 0, 0, 0, 0, 186, 0, 0, 0, 0, 0, 0, 0, 186, 0, 0, 0, 0, 0, 186, 176, 176, 176, 176,
176, 176, 176, 176, 186, 0, 0, 0, 0, 0, 0, 0, 186, 0, 0, 0, 0, 0, 0, 0, 186, 0, 0, 0, 0, 0, 186, 176, 176, 176, 176,
176, 176, 176, 176, 186, 0, 0, 0, 0, 0, 0, 0, 186, 0, 0, 0, 0, 0, 0, 0, 186, 0, 0, 0, 0, 0, 186, 176, 176, 176, 176,
176, 176, 176, 176, 186, 0, 0, 0, 0, 205, 205, 205, 206, 205, 205, 205, 0, 0, 0, 0, 186, 0, 0, 0, 0, 0, 186, 176 ,176, 176, 176,
176, 176, 176, 176, 186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 186, 176, 176, 176, 176,
176, 176, 176, 176, 186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 186, 176, 176, 176, 176,
176, 176, 176, 176, 186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 186, 176, 176, 176, 176,
176, 176, 176, 176, 200, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 188, 176, 176, 176, 176,
176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176};

int mapa3b[21][31]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 1, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 1, 0, 2, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0 ,0, 0, 0,
0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

int mapa4 [14][23]{176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
176, 176, 176, 176, 176, 176, 176, 201, 205, 205, 205, 205, 205, 205, 205, 205, 205, 187, 176, 176, 176, 176, 176,
176, 176, 176, 176, 176, 176, 176, 186, 3, 3, 3, 3, 3, 3, 3, 3, 3, 186, 176, 176, 176, 176, 176,
176, 176, 176, 176, 176, 176, 176, 186, 3, 3, 3, 3, 3, 3, 3, 3, 3, 200, 187, 176, 176, 176, 176,
176, 176, 176, 176, 176, 201, 205, 202, 205, 205, 205, 205, 205, 205, 205, 0, 0, 0, 186, 176, 176, 176, 176,
176, 176, 176, 176, 176, 186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 186, 176, 176, 176, 176,
176, 176, 176, 176, 176, 186, 0, 0, 201, 205, 0, 0, 0, 0, 0, 0, 0, 0, 186, 176, 176, 176, 176,
176, 176, 176, 176, 176, 186, 0, 0, 186, 0, 0, 205, 205, 0, 205, 205, 205, 0, 200, 187, 176, 176, 176,
176, 176, 176, 176, 176, 186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 186, 176, 176, 176,
176, 176, 176, 176, 176, 200, 205, 205, 187, 0, 0, 0, 0, 0, 0, 186, 0, 0, 0, 186, 176, 176, 176,
176, 176, 176, 176, 176, 176, 176, 176, 186, 0, 0, 0, 186, 0, 0, 0, 0, 0, 0, 186, 176, 176, 176,
176, 176, 176, 176, 176, 176, 176, 176, 186, 0, 0, 0, 0, 0, 201, 205, 205, 205, 205, 188, 176, 176, 176,
176, 176, 176, 176, 176, 176, 176, 176, 200, 205, 205, 205, 205, 205, 188, 176, 176, 176, 176, 176, 176, 176, 176,
176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176};

int mapa4b[14][23]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0,
0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 0, 1, 0, 0, 0, 0,
0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 1, 0, 0, 0, 0,
0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 2, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0,
0, 0, 0, 0, 0, 1, 0, 2, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0,
0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 0, 0,
0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 0, 2, 0, 0, 1, 2, 2, 0, 1, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

int mapa5 [19][91]{176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 177, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 201, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 187, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
176, 176, 176, 176, 176, 176, 176, 176, 176, 205, 176, 176, 176, 205, 176, 176, 176, 176, 176, 177, 177, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 201, 205, 205, 205, 205, 205, 188, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 205, 0, 0, 0, 200, 205, 205, 205, 205, 187, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 205, 176, 176, 176, 176, 176, 176, 176, 176, 176,
176, 176, 176, 176, 176, 205, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 177, 177, 201, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 188, 0, 0, 0, 0, 205, 0, 0, 0, 0, 205, 0, 0, 0, 0, 205, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 187, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 205, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 178, 178, 178, 178, 177, 177, 177, 186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 205, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 205, 0, 0, 0, 0, 186, 176, 176, 176, 176, 205, 176, 176, 176, 176, 176, 176, 176, 176, 205, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 177, 177, 200, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 187, 0, 0, 0, 205, 0, 0, 0, 0, 0, 0, 205, 0, 0, 0, 0, 0, 0, 205, 0, 0, 0, 0, 0, 0, 0, 0, 186, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 205, 176, 176, 176, 176, 176, 176, 205, 176, 176, 176, 176, 176, 176, 176,
176, 176, 176, 176, 176, 176, 176, 176, 176, 205, 176, 176, 176, 176, 176, 176, 176, 176, 176, 177, 177, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 200, 187, 0, 0, 0, 205, 0, 0, 0, 0, 0, 0, 0, 0, 0, 205, 0, 0, 0, 0, 205, 0, 0, 0, 0, 0, 201, 188, 176, 176, 176, 176, 176, 176, 176, 176, 205, 176, 176, 176, 176, 176, 205, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
176, 176, 176, 176, 176, 205, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 177, 176, 176, 176, 176, 176, 176, 176, 176, 201, 205, 205, 203, 205, 205, 205, 202, 205, 205, 205, 203, 205, 205, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 205, 205, 205, 205, 202, 205, 205, 205, 205, 205, 205, 187, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 205, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 201, 188, 0, 0, 186, 0, 0, 0, 0, 0, 0, 0, 186, 0, 0, 205, 0, 0, 201, 205, 205, 187, 0, 201, 0, 0, 187, 0, 201, 205, 187, 0, 201, 205, 187, 0, 0, 0, 0, 0, 200, 205, 205, 187, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 205, 176, 176, 176, 176, 176,
176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 205, 176, 176, 176, 176, 176, 176, 176, 176, 201, 188, 0, 0, 0, 204, 205, 205, 0, 0, 0, 205, 205, 185, 0, 0, 0, 0, 0, 186, 0, 0, 200, 205, 188, 0, 0, 186, 0, 186, 0, 200, 205, 188, 0, 186, 0, 0, 0, 205, 0, 0, 0, 0, 200, 205, 205, 187, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 205, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 201, 188, 0, 0, 0, 0, 186, 0, 0, 0, 0, 0, 0, 0, 186, 0, 0, 205, 0, 0, 186, 0, 201, 187, 0, 201, 187, 0, 186, 0, 186, 0, 0, 0, 0, 0, 186, 0, 0, 0, 205, 0, 0, 0, 0, 0, 0, 0, 200, 205, 205, 187, 176, 176, 176, 176, 176, 176, 176, 176, 205, 176, 176, 176, 176,
176, 176, 176, 176, 176, 176, 205, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 201, 188, 205, 0, 0, 0, 0, 204, 205, 205, 0, 0, 0, 205, 205, 185, 0, 0, 0, 0, 0, 186, 0, 186, 200, 205, 188, 186, 0, 186, 0, 186, 0, 201,  0, 187, 0, 186, 0, 205, 0, 0, 0, 0, 0, 205, 0, 0, 0, 0, 0, 0, 200, 205, 205, 187, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
176, 176, 176, 176, 176, 176, 205, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 201, 188, 0, 0, 0, 0, 205, 0, 186, 0, 0, 0, 0, 0, 0, 0, 186, 0, 0, 0, 0, 0, 200, 205, 188, 0, 0, 0, 200, 205, 188, 0, 200, 205, 188,  0, 200, 205, 188, 0, 0, 0, 0, 0, 205, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 205, 205, 187, 176, 176, 176, 176, 176, 176, 176,
176, 176, 176, 176, 176, 205, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 201, 188, 0, 0, 205, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 205, 0, 0, 0, 0, 0, 0, 205, 0, 0, 205, 0, 0, 0, 0, 0, 0, 0, 200, 205, 205, 187, 176, 176, 176, 176,
176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 201, 205, 205, 205, 205, 205, 205, 202, 205, 187, 201, 205, 205, 205, 205, 205, 205, 205, 205, 187, 201, 205, 205, 205, 205, 205, 205, 205, 205, 187, 201, 205, 205, 3, 0, 0, 3, 205, 205, 187, 201, 205, 205, 205, 205, 205, 205, 205, 205, 187, 201, 205, 205, 205, 205, 205, 205, 205, 205, 187, 201, 205, 205, 205, 205, 205, 205, 205, 205, 187, 204, 205, 205, 187, 176,
176, 176, 176, 176, 176, 176, 176, 176, 176, 205, 176, 176, 176, 176, 176, 201, 188, 0, 0, 0, 0, 0, 0, 0, 0, 200, 188, 0, 0, 0, 0, 0, 0, 0, 0, 200, 188, 0, 0, 0, 0, 0, 0, 0, 0, 200, 188, 0, 0, 0, 0, 0, 0, 0, 0, 200, 188, 0, 0, 0, 0, 0, 0, 0, 0, 200, 188, 0, 0, 0, 0, 0, 0, 0, 0, 200, 188, 0, 0, 0, 0, 0, 0, 0, 0, 200, 188, 0, 0, 186, 176,
176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 186, 0, 0, 0, 201, 205, 205, 187, 0, 0, 0, 0, 0, 0, 201, 205, 205, 187, 0, 0, 0, 0, 0, 0, 201, 205, 205, 187, 0, 0, 0, 0, 0, 0, 201, 205, 205, 187, 0, 0, 0, 0, 0, 0, 201, 205, 205, 187, 0, 0, 0, 0, 0, 0, 201, 205, 205, 187, 0, 0, 0, 0, 0, 0, 201, 205, 205, 187, 0, 0, 0, 0, 0, 0, 186, 176,
176, 176, 176, 176, 205, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 186, 0, 0, 0, 200, 205, 205, 188, 0, 0, 0, 0, 0, 0, 200, 205, 205, 188, 0, 0, 0, 0, 0, 0, 200, 205, 205, 188, 0, 0, 0, 0, 0, 0, 200, 205, 205, 188, 0, 0, 0, 0, 0, 0, 200, 205, 205, 188, 0, 0, 0, 0, 0, 0, 200, 205, 205, 188, 0, 0, 0, 0, 0, 0, 200, 205, 205, 188, 0, 0, 0, 0, 0, 201, 188, 176,
176, 176, 176, 176, 176, 176, 176, 205, 176, 176, 176, 176, 176, 176, 176, 200, 187, 0, 0, 0, 0, 0, 0, 0, 0, 201, 187, 0, 0, 0, 0, 0, 0, 0, 0, 201, 187, 0, 0, 0, 0, 0, 0, 0, 0, 201, 187, 0, 0, 0, 0, 0, 0, 0, 0, 201, 187, 0, 0, 0, 0, 0, 0, 0, 0, 201, 187, 0, 0, 0, 0, 0, 0, 0, 0, 201, 187, 0, 0, 0, 0, 0, 0, 0, 0, 201, 205, 205, 188, 176, 176,
176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 200, 205, 205, 205, 205, 205, 205, 205, 205, 188, 200, 205, 205, 205, 205, 205, 205, 205, 205, 188, 200, 205, 205, 205, 205, 205, 205, 205, 205, 188, 200, 205, 205, 205, 205, 205, 205, 205, 205, 188, 200, 205, 205, 205, 205, 205, 205, 205, 205, 188, 200, 205, 205, 205, 205, 205, 205, 205, 205, 188, 200, 205, 205, 205, 205, 205, 205, 205, 205, 188, 176, 176, 176, 176, 176};

int mapa5b[19][91]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0,
0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0,
0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0};



    int caixastuto [8] = {12,16,20,11,4,8,16,8};
	//variavel para saber se o objetivo foi completo
	bool menu1 = true, exit=false, bloqueiateclas = false;
bool menu2 = false, menu1v=false, menu2v=false;
    //PlaySound(TEXT("music.wav"),NULL, SND_FILENAME|SND_LOOP|SND_ASYNC);
    while(exit != true){
        while(menu1 == true){
            posicao = 0;
            for(int p=0;p<L;p++){
                if(posicao == L*C){posicao = 0;}
                for(int p1=0;p1<C;p1++,posicao++){
                    if(menu[posicao] != 0){
                        if(menu[posicao] == 1){
                            if(ntext == 0){
                                text = "Sokoban";
                            }
                            else if(ntext == 1){
                                text = "Jogar";
                            }
                            else{
                                text = "Ajuda";
                                ntext =-1;
                            }
                            cout << text;
                            ntext++;
                        }else if(menu[posicao] == 16 | menu[posicao] == 17){
                            switch(menuoption){
                                case 0:
                                    if(menuoption == 0 && posicao == 157){
                                        cout << char (16);
                                    }
                                    else if(menuoption == 0 && posicao == 161){
                                        cout << char (17);
                                    }else{cout << " ";}
                                    break;
                                case 1:
                                    if(menuoption == 1 && posicao == 227){
                                        cout << char (16);
                                    }
                                    else if(menuoption == 1 && posicao == 235){
                                        cout << char (17);
                                    }else{cout << " ";}
                                    break;
                            }
                        }else{
                            cout<<(char)(menu[posicao]);
                        }
                    }else{
                        cout<<" ";
                    }
                }
                cout<<"\n";
            }
            if (_kbhit()) {
                tecla = getch();
                switch (tecla){
                case 80:
                    menuoption++;
                    if(menuoption == 2){menuoption = 0;}
                    break;
                case 72:
                    menuoption--;
                    if(menuoption == -1){menuoption = 1;}
                    break;
                case 13:
                    menu1 = false;
                    menu2 = true;
                    menu1v = true;
                    break;
                }
            }
            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), iniciar);
        }
        if(menuoption == 0){ while(menu2==true){
            posicao = 0;
            for(int p=0;p<L1;p++){
                if(posicao == 261){posicao = 0;}
                for(int p1=0;p1<C1;p1++,posicao++){
                    if(menum[posicao] != 0){
                        if(menum[posicao] == 1){
                            if(ntext == 0){
                                text = "BlaytSlovakia";
                            }
                            else if(ntext == 1){
                                text = "chernoblayt";
                            }
                            else if (ntext == 2){
                                text = "Persblaytburgo";
                            }
                            else if (ntext == 3){
                                text = "vladirblaytvostok";
                            }
                            else{
                                text= "Putin";
                                    ntext = -1;
                            }
                            cout << text;
                            ntext++;
                        }else if(menum[posicao] == 16 | menum[posicao] == 17){
                            switch(menuoption){
                                case 0:
                                    if(menuoption == 0 && posicao == 63){
                                        cout << char (16);
                                    }
                                    else if(menuoption == 0 && posicao == 71){
                                        cout << char (17);
                                    }


                                    else{cout << " ";}
                                    break;
                                case 1:
                                    if(menuoption == 1 && posicao == 92 ){
                                        cout<< char (16);
                                    }
                                    else if(menuoption == 1 && posicao == 102 ){
                                        cout<< char (17);
                                    }
                                    else{cout << " ";}
                                    break;

                                    case 2:
                                    if (menuoption == 2 && posicao == 121 ){
                                        cout<< char (16);
                                    }
                                    else if (menuoption == 2 && posicao == 128){
                                        cout<< char (17);
                                    }
                                    else{cout << " ";}
                                    break;

                                    case 3:
                                    if (menuoption == 3 && posicao == 150 ){
                                        cout<< char (16);
                                    }
                                    else if (menuoption == 3 && posicao == 154 ){
                                        cout<< char (17);
                                    }
                                    else{cout << " ";}
                                    break;

                                    case 4:
                                    if (menuoption == 4 && posicao == 179){
                                        cout<< char (16);
                                    }
                                    else if (menuoption == 4 && posicao == 195){
                                        cout<< char (17);
                                    }

                                    else{cout << " ";}
                                    break;


                            }
                        }else{
                            cout<<(char)(menum[posicao]);
                        }
                    }else{
                        cout<<" ";
                    }
                }
                cout<<"\n";
            }
            if (_kbhit()) {
                tecla = getch();
                switch (tecla){
                case 80:
                    menuoption++;
                    if(menuoption == 5){menuoption = 0;}
                    break;
                case 72:
                    menuoption--;
                    if(menuoption == -1){menuoption = 4;}
                    break;
                case 13:
                    menu2=false;
                    menu1v=false;
                    menu2v=true;
                    break;
                }
            }
            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), iniciar);
}

        }
        if(menu2v == true && menuoption==0){

            for(ponto=0,coord.X = 5,coord.Y = 6; ponto<2;){
                for(int l=0;l<17;l++){
                    if(mapa1b[12][9]==2&&mapa1b[13][9]==2&&mapa1b[14][9]==2){
                    ponto=2;
                    menuoption=1;}
    for(int c=0; c<29;c++){
        if(mapa1[l][c]==3){
            if(mapa1b[l][c]==0){
                    cout<<"*";
        }else{cout<< char (219);}}
        else if(mapa1b[l][c]==2){
        cout<<char (219);
    }
        else if( mapa1 [l][c]==0){
            cout<<" ";
        }


        else{
            cout<< (char) (mapa1[l][c]);
        }
    }
     cout<<endl;
}
SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
    cout << char (254);
SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), iniciar);
if ( _kbhit() ){
            tecla = getch();
            switch(tecla)
            {
                case 'w': ///cima
                   coord.Y--;

                   if (mapa1b[coord.Y][coord.X]==1){
                    coord.Y++;
                   }
                   else if (mapa1b[coord.Y][coord.X]==2){
                    if(mapa1b[coord.Y-1][coord.X]!=1 && mapa1b[coord.Y-1][coord.X]!=2){
                        mapa1b[coord.Y][coord.X]=0;
                        mapa1b[coord.Y-1][coord.X]=2;
                    }
                    else{
                        coord.Y++;
                    }
                   }
                break;
                case 's': ///baixo
                    coord.Y++;
                    if (mapa1b[coord.Y][coord.X]==1){
                    coord.Y--;
                   }
                   else if(mapa1b[coord.Y][coord.X]==2){
                    if(mapa1b[coord.Y+1] [coord.X]!=1 && mapa1b[coord.Y+1] [coord.X]!=2){
                       mapa1b[coord.Y][coord.X] = 0;
                       mapa1b[coord.Y+1][coord.X]= 2;
                   }
                   else{
                    coord.Y--;
                   }
                   }
                break;
                case 'a': ///esquerda
                    coord.X--;
                    if (mapa1b[coord.Y][coord.X]==1){
                    coord.X++;
                   }
                   else if (mapa1b[coord.Y][coord.X]==2){
                    if(mapa1b[coord.Y][coord.X-1]!=1&& mapa1b[coord.Y][coord.X-1]!=2){
                        mapa1b [coord.Y][coord.X]=0;
                        mapa1b[coord.Y][coord.X-1]=2;
                    }
                    else{
                        coord.X++;
                    }
                   }
                break;
                case 'd': ///direita
                    coord.X++;

                    if (mapa1b[coord.Y][coord.X]==1){
                    coord.X--;
                   }
                   else if(mapa1b[coord.Y][coord.X]==2){
                    if(mapa1b[coord.Y][coord.X+1]!=1&& mapa1b[coord.Y][coord.X+1]!=2){
                        mapa1b [coord.Y][coord.X]=0;
                        mapa1b[coord.Y][coord.X+1]=2;
                    }
                    else{
                        coord.X--;
                    }
                   }

                break;
            }
         }
        }
        }
        if(menu2v == true && menuoption==1){
                for(ponto=0,coord.X = 8, coord.Y=6;ponto <2;){
                for(int l=0;l<16;l++){
    for(int c=0; c<34;c++){
            if(mapa2b[3][5]==2&&mapa2b[3][6]){
                    ponto=2;
                    menuoption=2;

                }
        if(mapa2[l][c]==3){
            if(mapa2b[l][c]==0){
                    cout<<"*";
        }else{cout<< char (219);}}
        else if(mapa2b[l][c]==2){
        cout<<char (219);
    }
        else if( mapa2 [l][c]==0){
            cout<<" ";
        }


        else{
            cout<< (char) (mapa2[l][c]);
        }
    }
     cout<<endl;
}
SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
    cout << char (254);
SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), iniciar);
if ( _kbhit() ){
            tecla = getch();
            switch(tecla)
            {
                case 'w': ///cima
                   coord.Y--;

                   if (mapa2b[coord.Y][coord.X]==1){
                    coord.Y++;
                   }
                   else if (mapa2b[coord.Y][coord.X]==2){
                    if(mapa2b[coord.Y-1][coord.X]!=1 && mapa2b[coord.Y-1][coord.X]!=2){
                        mapa2b[coord.Y][coord.X]=0;
                        mapa2b[coord.Y-1][coord.X]=2;
                    }
                    else{
                        coord.Y++;
                    }
                   }
                break;
                case 's': ///baixo
                    coord.Y++;
                    if (mapa2b[coord.Y][coord.X]==1){
                    coord.Y--;
                   }
                   else if(mapa2b[coord.Y][coord.X]==2){
                    if(mapa2b[coord.Y+1] [coord.X]!=1 && mapa2b[coord.Y+1] [coord.X]!=2){
                       mapa2b[coord.Y][coord.X] = 0;
                       mapa2b[coord.Y+1][coord.X]= 2;
                   }
                   else{
                    coord.Y--;
                   }
                   }
                break;
                case 'a': ///esquerda
                    coord.X--;
                    if (mapa2b[coord.Y][coord.X]==1){
                    coord.X++;
                   }
                   else if (mapa2b[coord.Y][coord.X]==2){
                    if(mapa2b[coord.Y][coord.X-1]!=1&& mapa2b[coord.Y][coord.X-1]!=2){
                        mapa2b [coord.Y][coord.X]=0;
                        mapa2b[coord.Y][coord.X-1]=2;
                    }
                    else{
                        coord.X++;
                    }
                   }
                break;
                case 'd': ///direita
                    coord.X++;

                    if (mapa2b[coord.Y][coord.X]==1){
                    coord.X--;
                   }
                   else if(mapa2b[coord.Y][coord.X]==2){
                    if(mapa2b[coord.Y][coord.X+1]!=1&& mapa2b[coord.Y][coord.X+1]!=2){
                        mapa2b [coord.Y][coord.X]=0;
                        mapa2b[coord.Y][coord.X+1]=2;
                    }
                    else{
                        coord.X--;
                    }
                   }

                break;
            }
         }
        }
}
        if(menu2v == true && menuoption==2){
        for(ponto=0,coord.X = 8, coord.Y=6;ponto <5;){
            for(int l=0;l<21;l++){

    for(int c=0; c<31;c++){
        if(mapa3[l][c]==3){
                if(mapa3b[11][21]==2&&mapa3b[11][22]==2&&mapa3b[11][23]==2&&mapa3b[11][24]==2&&mapa3b[11][25]==2){
                    ponto=5;
                    menuoption=3;

                }
            if(mapa3b[l][c]==0){
                    cout<<"*";
        }else{cout<< char (219);}}
        else if(mapa3b[l][c]==2){
        cout<<char (219);
    }
        else if( mapa3 [l][c]==0){
            cout<<" ";
        }


        else{
            cout<< (char) (mapa3[l][c]);
        }
    }
     cout<<endl;
}
SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
    cout << char (254);
SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), iniciar);
if ( _kbhit() ){
            tecla = getch();
            switch(tecla)
            {
                case 'w': ///cima
                   coord.Y--;

                   if (mapa3b[coord.Y][coord.X]==1){
                    coord.Y++;
                   }
                   else if (mapa3b[coord.Y][coord.X]==2){
                    if(mapa3b[coord.Y-1][coord.X]!=1 && mapa3b[coord.Y-1][coord.X]!=2){
                        mapa3b[coord.Y][coord.X]=0;
                        mapa3b[coord.Y-1][coord.X]=2;
                    }
                    else{
                        coord.Y++;
                    }
                   }
                break;
                case 's': ///baixo
                    coord.Y++;
                    if (mapa3b[coord.Y][coord.X]==1){
                    coord.Y--;
                   }
                   else if(mapa3b[coord.Y][coord.X]==2){
                    if(mapa3b[coord.Y+1] [coord.X]!=1 && mapa3b[coord.Y+1] [coord.X]!=2){
                       mapa3b[coord.Y][coord.X] = 0;
                       mapa3b[coord.Y+1][coord.X]= 2;
                   }
                   else{
                    coord.Y--;
                   }
                   }
                break;
                case 'a': ///esquerda
                    coord.X--;
                    if (mapa3b[coord.Y][coord.X]==1){
                    coord.X++;
                   }
                   else if (mapa3b[coord.Y][coord.X]==2){
                    if(mapa3b[coord.Y][coord.X-1]!=1&& mapa3b[coord.Y][coord.X-1]!=2){
                        mapa3b [coord.Y][coord.X]=0;
                        mapa3b[coord.Y][coord.X-1]=2;
                    }
                    else{
                        coord.X++;
                    }
                   }
                break;
                case 'd': ///direita
                    coord.X++;

                    if (mapa3b[coord.Y][coord.X]==1){
                    coord.X--;
                   }
                   else if(mapa3b[coord.Y][coord.X]==2){
                    if(mapa3b[coord.Y][coord.X+1]!=1&& mapa3b[coord.Y][coord.X+1]!=2){
                        mapa3b [coord.Y][coord.X]=0;
                        mapa3b[coord.Y][coord.X+1]=2;
                    }
                    else{
                        coord.X--;
                    }
                   }

                break;
            }
         }
         }
               }
        if(menu2v == true && menuoption==3){
                for(ponto=0,coord.X = 7, coord.Y=6;ponto <5;){
                for(int l=0;l<14;l++){
    for(int c=0; c<23;c++){
            if(mapa4b[2][8]==2&&mapa4b[2][9]==2&&mapa4b[2][10]==2&&mapa4b[2][11]==2&&mapa4b[2][12]==2&&mapa4b[2][13]==2&&mapa4b[2][14]==2&&mapa4b[2][15]==2&&mapa4b[2][16]==2&&
               mapa4b[3][8]==2&&mapa4b[3][9]==2&&mapa4b[3][10]==2&&mapa4b[3][11]==2&&mapa4b[3][12]==2&&mapa4b[3][13]==2&&mapa4b[3][14]==2&&mapa4b[3][15]==2&&mapa4b[3][16]==2){
                ponto=5;
               menuoption=4;
            }
        if(mapa4[l][c]==3){
            if(mapa4b[l][c]==0){
                    cout<<"*";
        }else{cout<< char (220);}}
        else if(mapa4b[l][c]==2){
        cout<<char (220);
    }
        else if( mapa4 [l][c]==0){
            cout<<" ";
        }


        else{
            cout<< (char) (mapa4[l][c]);
        }
    }
     cout<<endl;
}
SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
    cout << char (254);
SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), iniciar);
if ( _kbhit() ){
            tecla = getch();
            switch(tecla)
            {
                case 'w': ///cima
                   coord.Y--;

                   if (mapa4b[coord.Y][coord.X]==1){
                    coord.Y++;
                   }
                   else if (mapa4b[coord.Y][coord.X]==2){
                    if(mapa4b[coord.Y-1][coord.X]!=1 && mapa4b[coord.Y-1][coord.X]!=2){
                        mapa4b[coord.Y][coord.X]=0;
                        mapa4b[coord.Y-1][coord.X]=2;
                    }
                    else{
                        coord.Y++;
                    }
                   }
                break;
                case 's': ///baixo
                    coord.Y++;
                    if (mapa4b[coord.Y][coord.X]==1){
                    coord.Y--;
                   }
                   else if(mapa4b[coord.Y][coord.X]==2){
                    if(mapa4b[coord.Y+1] [coord.X]!=1 && mapa4b[coord.Y+1] [coord.X]!=2){
                       mapa4b[coord.Y][coord.X] = 0;
                       mapa4b[coord.Y+1][coord.X]= 2;
                   }
                   else{
                    coord.Y--;
                   }
                   }
                break;
                case 'a': ///esquerda
                    coord.X--;
                    if (mapa4b[coord.Y][coord.X]==1){
                    coord.X++;
                   }
                   else if (mapa4b[coord.Y][coord.X]==2){
                    if(mapa4b[coord.Y][coord.X-1]!=1&& mapa4b[coord.Y][coord.X-1]!=2){
                        mapa4b [coord.Y][coord.X]=0;
                        mapa4b[coord.Y][coord.X-1]=2;
                    }
                    else{
                        coord.X++;
                    }
                   }
                break;
                case 'd': ///direita
                    coord.X++;

                    if (mapa4b[coord.Y][coord.X]==1){
                    coord.X--;
                   }
                   else if(mapa4b[coord.Y][coord.X]==2){
                    if(mapa4b[coord.Y][coord.X+1]!=1&& mapa4b[coord.Y][coord.X+1]!=2){
                        mapa4b [coord.Y][coord.X]=0;
                        mapa4b[coord.Y][coord.X+1]=2;
                    }
                    else{
                        coord.X--;
                    }
                   }

                break;
            }
         }
        }
                }
        if(menu2v == true && menuoption==4){for(int l=0;l<19;l++){
                for(ponto=0,coord.X = 22, coord.Y=3;ponto <2;){

for(int l=0;l<19;l++){
    for(int c=0; c<91;c++){
            if(mapa5b[13][49]==2&&mapa5b[13][52]==2){
                ponto=2;
                menu1v=true;
                menu2v=false;
                menu1=true;
                menu2=false;
            }
        if(mapa5[l][c]==3){
            if(mapa5b[l][c]==0){
                    cout<<"*";
        }else{cout<< char (220);}}
        else if(mapa5b[l][c]==2){
        cout<<char (220);
    }
        else if( mapa5 [l][c]==0){
            cout<<" ";
        }


        else{
            cout<< (char) (mapa5[l][c]);
        }
    }
     cout<<endl;
}
SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
    cout << char (254);
SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), iniciar);
if ( _kbhit() ){
            tecla = getch();
            switch(tecla)
            {
                case 'w': ///cima
                   coord.Y--;

                   if (mapa5b[coord.Y][coord.X]==1){
                    coord.Y++;
                   }
                   else if (mapa5b[coord.Y][coord.X]==2){
                    if(mapa5b[coord.Y-1][coord.X]!=1 && mapa5b[coord.Y-1][coord.X]!=2){
                        mapa5b[coord.Y][coord.X]=0;
                        mapa5b[coord.Y-1][coord.X]=2;
                    }
                    else{
                        coord.Y++;
                    }
                   }
                break;
                case 's': ///baixo
                    coord.Y++;
                    if (mapa5b[coord.Y][coord.X]==1){
                    coord.Y--;
                   }
                   else if(mapa5b[coord.Y][coord.X]==2){
                    if(mapa5b[coord.Y+1] [coord.X]!=1 && mapa5b[coord.Y+1] [coord.X]!=2){
                       mapa5b[coord.Y][coord.X] = 0;
                       mapa5b[coord.Y+1][coord.X]= 2;
                   }
                   else{
                    coord.Y--;
                   }
                   }
                break;
                case 'a': ///esquerda
                    coord.X--;
                    if (mapa5b[coord.Y][coord.X]==1){
                    coord.X++;
                   }
                   else if (mapa5b[coord.Y][coord.X]==2){
                    if(mapa5b[coord.Y][coord.X-1]!=1&& mapa5b[coord.Y][coord.X-1]!=2){
                        mapa5b [coord.Y][coord.X]=0;
                        mapa5b[coord.Y][coord.X-1]=2;
                    }
                    else{
                        coord.X++;
                    }
                   }
                break;
                case 'd': ///direita
                    coord.X++;

                    if (mapa5b[coord.Y][coord.X]==1){
                    coord.X--;
                   }
                   else if(mapa5b[coord.Y][coord.X]==2){
                    if(mapa5b[coord.Y][coord.X+1]!=1&& mapa5b[coord.Y][coord.X+1]!=2){
                        mapa5b [coord.Y][coord.X]=0;
                        mapa5b[coord.Y][coord.X+1]=2;
                    }
                    else{
                        coord.X--;
                    }
                   }

                break;
            }
         }

}

 }
 }

        if (menu1v == true && menuoption==1){
            for(int p=0;p<20;p++){
                for(int p1= 0;p1<36;p1++){
                    if(mptutorial[p][p1] == 0){
                        cout << " ";
                    }
                    else{
                        cout << (char) (mptutorial[p][p1]);
                    }
                    //cout << "#";
                }
                cout << "\n";
            }
            coord.X=8;
            coord.Y=17;
            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
            cout << "@";

            int cont = 0;
            while(cont<8){
                if(cont==0){
                    caixa1.X = caixastuto[cont];
                    cont++;
                    caixa1.Y = caixastuto[cont];
                    cont++;
                    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), caixa1);
                    cout << (char) (219);
                }
                if(cont==2){
                    caixa2.X = caixastuto[cont];
                    cont++;
                    caixa2.Y = caixastuto[cont];
                    cont++;
                    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), caixa2);
                    cout << (char) (219);
                }
                if(cont==4){
                    caixa3.X = caixastuto[cont];
                    cont++;
                    caixa3.Y = caixastuto[cont];
                    cont++;
                    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), caixa3);
                    cout << (char) (219);
                }
                if(cont==6){
                    caixa4.X = caixastuto[cont];
                    cont++;
                    caixa4.Y = caixastuto[cont];
                    cont++;
                    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), caixa4);
                    cout << (char) (219);
                }
            }

            if(textotuto==0){
                bloqueiateclas = true;
                text = "                                                                                                                                      \n";
                texttuto.X = 1;
                texttuto.Y = 22;
                SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), texttuto);
                cout << "Bem vindo ao Sokoban";
                Sleep(2000);
                SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), texttuto);
                cout << text << text << text << text << text << text;

                SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), texttuto);
                cout << "Este jogo foi desenvolvido pelos alunos da Univali:\n Matheus Evandro Rech\n Henrique Leonardo Beerends Junior \n Mateus da Silva Francelino";
                Sleep(6000);
                SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), texttuto);
                cout << text << text << text << text << text << text;

                SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), texttuto);
                cout << "O jogo sokoban e um jogo de estrategia, o objetivo do jogo\n e alcancado quando voce colocar todas as caixas\n nos seus locais.";
                Sleep(6000);
                SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), texttuto);
                cout << text << text << text << text << text << text;

                SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), texttuto);
                cout << "Vamos aos comando:\n 'W' para ir para cima\n 'S' para baixo\n 'A' para a esquerda\n 'D' para a direita.";
                Sleep(4000);
                cout << "\n Movimente o seu personagem.";
                bloqueiateclas = false;
                textotuto = 1;
            }


            while(menu1 == false){
                if (_kbhit()) {
                    tecla = getch();
                    switch (tecla){
                        case 119://W//
                            if(block[coord.Y-1][coord.X] != 1){
                                if((coord.X == caixa1.X && coord.Y-1 == caixa1.Y) || (coord.X == caixa2.X && coord.Y-1 == caixa2.Y) || (coord.X == caixa3.X && coord.Y-1 == caixa3.Y) || (coord.X == caixa4.X && coord.Y-1 == caixa4.Y)){
                                    if(coord.X == caixa1.X && coord.Y-1 == caixa1.Y){
                                        if(block[caixa1.Y-1][caixa1.X] != 1 && (blockcx[caixa1.Y-1][caixa1.X] != blockcx[caixa2.Y][caixa2.X]) && (blockcx[caixa1.Y-1][caixa1.X] != blockcx[caixa3.Y][caixa3.X]) && (blockcx[caixa1.Y-1][caixa1.X] != blockcx[caixa4.Y][caixa4.X])){
                                            caixa1.Y--;
                                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
                                            cout << " ";
                                            coord.Y--;
                                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
                                            cout << "@";
                                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), caixa1);
                                            cout << (char) (219);
                                        }
                                    }
                                    else if(coord.X == caixa2.X && coord.Y-1 == caixa2.Y){
                                        if(block[caixa2.Y-1][caixa2.X] != 1 && (blockcx[caixa2.Y-1][caixa2.X] != blockcx[caixa1.Y][caixa1.X]) && (blockcx[caixa2.Y-1][caixa2.X] != blockcx[caixa3.Y][caixa3.X]) && (blockcx[caixa2.Y-1][caixa2.X] != blockcx[caixa4.Y][caixa4.X])){
                                            caixa2.Y--;
                                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
                                            cout << " ";
                                            coord.Y--;
                                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
                                            cout << "@";
                                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), caixa2);
                                            cout << (char) (219);
                                        }
                                    }
                                    else if(coord.X == caixa3.X && coord.Y-1 == caixa3.Y){
                                        if(block[caixa3.Y-1][caixa3.X] != 1 && (blockcx[caixa3.Y-1][caixa3.X] != blockcx[caixa2.Y][caixa2.X]) && (blockcx[caixa3.Y-1][caixa3.X] != blockcx[caixa1.Y][caixa1.X]) && (blockcx[caixa3.Y-1][caixa3.X] != blockcx[caixa4.Y][caixa4.X])){
                                            caixa3.Y--;
                                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
                                            cout << " ";
                                            coord.Y--;
                                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
                                            cout << "@";
                                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), caixa3);
                                            cout << (char) (219);
                                        }
                                    }
                                    else if(coord.X == caixa4.X && coord.Y-1 == caixa4.Y){
                                        if(block[caixa4.Y-1][caixa4.X] != 1 && (blockcx[caixa4.Y-1][caixa4.X] != blockcx[caixa2.Y][caixa2.X]) && (blockcx[caixa4.Y-1][caixa4.X] != blockcx[caixa3.Y][caixa3.X]) && (blockcx[caixa4.Y-1][caixa4.X] != blockcx[caixa1.Y][caixa1.X])){
                                            caixa4.Y--;
                                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
                                            cout << " ";
                                            coord.Y--;
                                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
                                            cout << "@";
                                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), caixa4);
                                            cout << (char) (219);
                                        }
                                    }
                                }else{
                                    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
                                    cout << " ";
                                    coord.Y--;
                                    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
                                    cout << "@";
                                }
                            }
                            break;
                        case 115://S//
                            if(block[coord.Y+1][coord.X] != 1){
                                if((coord.X == caixa1.X && coord.Y+1 == caixa1.Y) || (coord.X == caixa2.X && coord.Y+1 == caixa2.Y) || (coord.X == caixa3.X && coord.Y+1 == caixa3.Y) || (coord.X == caixa4.X && coord.Y+1 == caixa4.Y)){
                                    if(coord.X == caixa1.X && coord.Y+1 == caixa1.Y){
                                        if(block[caixa1.Y+1][caixa1.X] != 1 && (blockcx[caixa1.Y+1][caixa1.X] != blockcx[caixa2.Y][caixa2.X]) && (blockcx[caixa1.Y+1][caixa1.X] != blockcx[caixa3.Y][caixa3.X]) && (blockcx[caixa1.Y+1][caixa1.X] != blockcx[caixa4.Y][caixa4.X])){
                                            caixa1.Y++;
                                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
                                            cout << " ";
                                            coord.Y++;
                                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
                                            cout << "@";
                                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), caixa1);
                                            cout << (char) (219);
                                        }
                                    }
                                    else if(coord.X == caixa2.X && coord.Y+1 == caixa2.Y){
                                        if(block[caixa2.Y+1][caixa2.X] != 1 && (blockcx[caixa2.Y+1][caixa2.X] != blockcx[caixa1.Y][caixa1.X]) && (blockcx[caixa2.Y+1][caixa2.X] != blockcx[caixa3.Y][caixa3.X]) && (blockcx[caixa2.Y+1][caixa2.X] != blockcx[caixa4.Y][caixa4.X])){
                                            caixa2.Y++;
                                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
                                            cout << " ";
                                            coord.Y++;
                                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
                                            cout << "@";
                                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), caixa2);
                                            cout << (char) (219);
                                        }
                                    }
                                    else if(coord.X == caixa3.X && coord.Y+1 == caixa3.Y){
                                        if(block[caixa3.Y+1][caixa3.X] != 1 && (blockcx[caixa3.Y+1][caixa3.X] != blockcx[caixa2.Y][caixa2.X]) && (blockcx[caixa3.Y+1][caixa3.X] != blockcx[caixa1.Y][caixa1.X]) && (blockcx[caixa3.Y+1][caixa3.X] != blockcx[caixa4.Y][caixa4.X])){
                                            caixa3.Y++;
                                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
                                            cout << " ";
                                            coord.Y++;
                                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
                                            cout << "@";
                                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), caixa3);
                                            cout << (char) (219);
                                        }
                                    }
                                    else if(coord.X == caixa4.X && coord.Y+1 == caixa4.Y){
                                        if(block[caixa4.Y+1][caixa4.X] != 1 && (blockcx[caixa4.Y+1][caixa4.X] != blockcx[caixa2.Y][caixa2.X]) && (blockcx[caixa4.Y+1][caixa4.X] != blockcx[caixa3.Y][caixa3.X]) && (blockcx[caixa4.Y+1][caixa4.X] != blockcx[caixa1.Y][caixa1.X])){
                                            caixa4.Y++;
                                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
                                            cout << " ";
                                            coord.Y++;
                                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
                                            cout << "@";
                                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), caixa4);
                                            cout << (char) (219);
                                        }
                                    }
                                }else{
                                    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
                                    cout << " ";
                                    coord.Y++;
                                    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
                                    cout << "@";
                                }
                            }
                            break;
                        case 97://A//
                            if(block[coord.Y][coord.X-1] != 1){
                                if((coord.X-1 == caixa1.X && coord.Y == caixa1.Y) || (coord.X-1 == caixa2.X && coord.Y == caixa2.Y) || (coord.X-1 == caixa3.X && coord.Y == caixa3.Y) || (coord.X-1 == caixa4.X && coord.Y == caixa4.Y)){
                                    if(coord.X-1 == caixa1.X && coord.Y == caixa1.Y){
                                        if(block[caixa1.Y][caixa1.X-1] != 1 && (blockcx[caixa1.Y][caixa1.X-1] != blockcx[caixa2.Y][caixa2.X]) && (blockcx[caixa1.Y][caixa1.X-1] != blockcx[caixa3.Y][caixa3.X]) && (blockcx[caixa1.Y][caixa1.X-1] != blockcx[caixa4.Y][caixa4.X])){
                                            caixa1.X--;
                                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
                                            cout << " ";
                                            coord.X--;
                                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
                                            cout << "@";
                                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), caixa1);
                                            cout << (char) (219);
                                        }
                                    }
                                    else if(coord.X-1 == caixa2.X && coord.Y == caixa2.Y){
                                        if(block[caixa2.Y][caixa2.X-1] != 1 && (blockcx[caixa2.Y][caixa2.X-1] != blockcx[caixa1.Y][caixa1.X]) && (blockcx[caixa2.Y][caixa2.X-1] != blockcx[caixa3.Y][caixa3.X]) && (blockcx[caixa2.Y][caixa2.X-1] != blockcx[caixa4.Y][caixa4.X])){
                                            caixa2.X--;
                                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
                                            cout << " ";
                                            coord.X--;
                                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
                                            cout << "@";
                                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), caixa2);
                                            cout << (char) (219);
                                        }
                                    }
                                    else if(coord.X-1 == caixa3.X && coord.Y == caixa3.Y){
                                        if(block[caixa3.Y][caixa3.X-1] != 1 && (blockcx[caixa3.Y][caixa3.X-1] != blockcx[caixa2.Y][caixa2.X]) && (blockcx[caixa3.Y][caixa3.X-1] != blockcx[caixa1.Y][caixa1.X]) && (blockcx[caixa3.Y][caixa3.X-1] != blockcx[caixa4.Y][caixa4.X])){
                                            caixa3.X--;
                                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
                                            cout << " ";
                                            coord.X--;
                                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
                                            cout << "@";
                                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), caixa3);
                                            cout << (char) (219);
                                        }
                                    }
                                    else if(coord.X-1 == caixa4.X && coord.Y == caixa4.Y){
                                        if(block[caixa4.Y][caixa4.X-1] != 1 && (blockcx[caixa4.Y][caixa4.X-1] != blockcx[caixa2.Y][caixa2.X]) && (blockcx[caixa4.Y][caixa4.X-1] != blockcx[caixa3.Y][caixa3.X]) && (blockcx[caixa4.Y][caixa4.X-1] != blockcx[caixa1.Y][caixa1.X])){
                                            caixa4.X--;
                                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
                                            cout << " ";
                                            coord.X--;
                                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
                                            cout << "@";
                                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), caixa4);
                                            cout << (char) (219);
                                        }
                                    }
                                }else{
                                    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
                                    cout << " ";
                                    coord.X--;
                                    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
                                    cout << "@";
                                }
                            }
                            break;
                        case 100://D//
                            if(block[coord.Y][coord.X+1] != 1){
                                if((coord.X+1 == caixa1.X && coord.Y == caixa1.Y) || (coord.X+1 == caixa2.X && coord.Y == caixa2.Y) || (coord.X+1 == caixa3.X && coord.Y == caixa3.Y) || (coord.X+1 == caixa4.X && coord.Y == caixa4.Y)){
                                    if(coord.X+1 == caixa1.X && coord.Y == caixa1.Y){
                                        if(block[caixa1.Y][caixa1.X+1] != 1 && (blockcx[caixa1.Y][caixa1.X+1] != blockcx[caixa2.Y][caixa2.X]) && (blockcx[caixa1.Y][caixa1.X+1] != blockcx[caixa3.Y][caixa3.X]) && (blockcx[caixa1.Y][caixa1.X+1] != blockcx[caixa4.Y][caixa4.X])){
                                            caixa1.X++;
                                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
                                            cout << " ";
                                            coord.X++;
                                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
                                            cout << "@";
                                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), caixa1);
                                            cout << (char) (219);
                                        }
                                    }
                                    else if(coord.X+1 == caixa2.X && coord.Y == caixa2.Y){
                                        if(block[caixa2.Y][caixa2.X+1] != 1 && (blockcx[caixa2.Y][caixa2.X+1] != blockcx[caixa1.Y][caixa1.X]) && (blockcx[caixa2.Y][caixa2.X+1] != blockcx[caixa3.Y][caixa3.X]) && (blockcx[caixa2.Y][caixa2.X+1] != blockcx[caixa4.Y][caixa4.X])){
                                            caixa2.X++;
                                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
                                            cout << " ";
                                            coord.X++;
                                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
                                            cout << "@";
                                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), caixa2);
                                            cout << (char) (219);
                                        }
                                    }
                                    else if(coord.X+1 == caixa3.X && coord.Y == caixa3.Y){
                                        if(block[caixa3.Y][caixa3.X+1] != 1 && (blockcx[caixa3.Y][caixa3.X+1] != blockcx[caixa2.Y][caixa2.X]) && (blockcx[caixa3.Y][caixa3.X+1] != blockcx[caixa1.Y][caixa1.X]) && (blockcx[caixa3.Y][caixa3.X+1] != blockcx[caixa4.Y][caixa4.X])){
                                            caixa3.X++;
                                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
                                            cout << " ";
                                            coord.X++;
                                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
                                            cout << "@";
                                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), caixa3);
                                            cout << (char) (219);
                                        }
                                    }
                                    else if(coord.X+1 == caixa4.X && coord.Y == caixa4.Y){
                                        if(block[caixa4.Y][caixa4.X+1] != 1 && (blockcx[caixa4.Y][caixa4.X+1] != blockcx[caixa2.Y][caixa2.X]) && (blockcx[caixa4.Y][caixa4.X+1] != blockcx[caixa3.Y][caixa3.X]) && (blockcx[caixa4.Y-1][caixa4.X] != blockcx[caixa1.Y][caixa1.X])){
                                            caixa4.X++;
                                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
                                            cout << " ";
                                            coord.X++;
                                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
                                            cout << "@";
                                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), caixa4);
                                            cout << (char) (219);
                                        }
                                    }
                                }else{
                                    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
                                    cout << " ";
                                    coord.X++;
                                    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
                                    cout << "@";
                                }
                            }
                            break;
                        case 114://R//
                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
                            cout << " ";
                            coord.X = 8;
                            coord.Y = 17;
                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
                            cout << "@";
                            restart.X = 15;
                            restart.Y = 5;
                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), restart);
                            cout << (char) (207);
                            restart.X = 21;
                            restart.Y = 5;
                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), restart);
                            cout << (char) (207);
                            restart.X = 23;
                            restart.Y = 5;
                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), restart);
                            cout << (char) (207);
                            restart.X = 29;
                            restart.Y = 5;
                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), restart);
                            cout << (char) (207);
                            cont = 0;
                            if(cont==0){
                                SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), caixa1);
                                cout << " ";
                                caixa1.X = caixastuto[cont];
                                cont++;
                                caixa1.Y = caixastuto[cont];
                                cont++;
                                SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), caixa1);
                                cout << (char) (219);
                            }
                            if(cont==2){
                                SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), caixa2);
                                cout << " ";
                                caixa2.X = caixastuto[cont];
                                cont++;
                                caixa2.Y = caixastuto[cont];
                                cont++;
                                SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), caixa2);
                                cout << (char) (219);
                            }
                            if(cont==4){
                                SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), caixa3);
                                cout << " ";
                                caixa3.X = caixastuto[cont];
                                cont++;
                                caixa3.Y = caixastuto[cont];
                                cont++;
                                SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), caixa3);
                                cout << (char) (219);
                            }
                            if(cont==6){
                                SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), caixa4);
                                cout << " ";
                                caixa4.X = caixastuto[cont];
                                cont++;
                                caixa4.Y = caixastuto[cont];
                                cont++;
                                SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), caixa4);
                                cout << (char) (219);
                            }
                            break;
                        case 98:
                            menu1 = true;
                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), iniciar);
                            for(int i=0;i<20;i++){
                                for(int j=0;j<36;j++){
                                    cout << " ";
                                }
                                cout << "\n";
                                text = "                                                                                                                                      \n";
                                cout << text << text << text << text << text << text<< text<< text<< text<< text<< text<< text<< text<< text<< text<< text<< text<< text<< text<< text<< text;
                            }
                            SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), iniciar);
                            break;
                    }
                }
                if((blockcx[caixa1.Y][caixa1.X] == 202 || blockcx[caixa1.Y][caixa1.X] ==204 || blockcx[caixa1.Y][caixa1.X] == 210 || blockcx[caixa1.Y][caixa1.X] ==196) && (blockcx[caixa2.Y][caixa2.X] ==202 || blockcx[caixa2.Y][caixa2.X] ==204 || blockcx[caixa2.Y][caixa2.X] ==210 || blockcx[caixa2.Y][caixa2.X] ==196) && (blockcx[caixa3.Y][caixa3.X] ==202 || blockcx[caixa3.Y][caixa3.X] ==204 || blockcx[caixa3.Y][caixa3.X] ==210 || blockcx[caixa3.Y][caixa3.X] ==196) && (blockcx[caixa4.Y][caixa4.X] ==202 || blockcx[caixa4.Y][caixa4.X] ==204 || blockcx[caixa4.Y][caixa4.X] ==210 || blockcx[caixa4.Y][caixa4.X] ==196)){
                    menu1 = true;
                    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), iniciar);
                    for(int i=0;i<20;i++){
                        for(int j=0;j<36;j++){
                            cout << " ";
                        }
                        cout << "\n";
                        text = "                                                                                                                                      \n";
                        cout << text << text << text << text << text << text<< text<< text<< text<< text<< text<< text<< text<< text<< text<< text<< text<< text<< text<< text<< text;
                    }
                    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), iniciar);
                }
                if(blockcx[coord.Y][coord.X] == 625 && textotuto == 1){
                    bloqueiateclas = true;
                    text = "                                                                                                                                      \n";
                    texttuto.X = 1;
                    texttuto.Y = 22;
                    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), texttuto);
                    cout << text << text << text << text << text << text;
                    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), texttuto);
                    cout << "Ok, agora vamos a proxima etapa.";
                    Sleep(2000);
                    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), texttuto);
                    cout << text << text << text << text << text << text;

                    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), texttuto);
                    cout << "Voce deve mover as caixas nos objetivos.";
                    Sleep(6000);
                    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), texttuto);
                    cout << text << text << text << text << text << text;

                    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), texttuto);
                    cout << "Essa e a caixa: " << (char) (219) << "\n e esse e o objetivo: " << (char) (207);
                    Sleep(6000);
                    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), texttuto);
                    cout << text << text << text << text << text << text;

                    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), texttuto);
                    cout << "Agora e com voce";
                    cout << "\n Movimente o seu personagem.";
                    cout << "\n Para reiniciar aperte 'R' e para sair aperte 'B'";
                    bloqueiateclas = false;
                    textotuto = 2;
                }
            }
        }
    }

    return 0;
}


